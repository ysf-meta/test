AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Lambda functions and S3 bucket
Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: test0ttoow415
      

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  MyLambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: testfun00001
      Code:
        ZipFile: |
          import csv
          import boto3
          def lambda_handler(event, context):
            header = ['Name', 'Age', 'Profession']
            data = [('John', '25', 'Engineer'),
            ('Anna', '28', 'Doctor'),
            ('Peter', '30', 'Artist')]
            filename = 'people.csv'
            with open('/tmp/' + filename, 'w', newline='') as f:
              writer = csv.writer(f)
              writer.writerow(header)
              writer.writerows(data)
            bucket = 'test0ttoow415'
            s3 = boto3.client('s3')
            s3.upload_file('/tmp/' + filename, bucket, filename)
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.8

  MyLambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: testfun00002
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
            s3 = boto3.client('s3')
            bucket_name = 'test0ttoow415'
            object_key = 'people.csv'
            try:
              response = s3.get_object(Bucket=bucket_name, Key=object_key)
              data = response['Body'].read()
              print(data)
              return {
              'statusCode': 200,
              'body': data.decode('utf-8')
              }
            except Exception as e:
              print(f"Error: {e}")
              return {
              'statusCode': 500,
              'body': 'Error.'
              }

      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.8
